/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package p2p_cs535;

import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author zhichengfu
 */
public class ShareFileInterface extends javax.swing.JFrame {

    /**
     * Creates new form ShareFileInterface
     */
    Client client;
    String[] tableNames = {"FileName", "Server IP"};
    DefaultTableModel fileTableModel;
    LinkedList<FileEntry> files;

    public ShareFileInterface(Client client) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.client = client;
        this.jTable1.setRowHeight(20);
        fileTableModel = (DefaultTableModel) this.jTable1.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        searchedFileName = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        downloadButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        shareFile = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        initSetting = new javax.swing.JMenuItem();
        doRegister = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Available Files");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "FileName", "Server IP"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
        }

        downloadButton.setText("Download Selected File");
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });

        shareFile.setText("File");

        jMenuItem1.setText("ShareFile");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        shareFile.add(jMenuItem1);

        jMenuBar1.add(shareFile);

        jMenu2.setText("Operations");

        initSetting.setText("Init_Setting");
        initSetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initSettingActionPerformed(evt);
            }
        });
        jMenu2.add(initSetting);

        doRegister.setText("Registration");
        doRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doRegisterActionPerformed(evt);
            }
        });
        jMenu2.add(doRegister);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchedFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(downloadButton)
                            .addComponent(searchButton))))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchedFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(downloadButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        String name = this.searchedFileName.getText();
        if (name.equals("")) {
            JOptionPane.showMessageDialog(null, "Please input the file name!");
        } 
        else if(this.client.serverIP==null)
        {
            JOptionPane.showMessageDialog(null, "You have not registered into any server!");
        }
        else {
            try {
                this.files = this.client.getFilesIndexBasedName(this.client.serverIP, this.client.serverPort, name);
                if (files.size() != 0) {
                    for (FileEntry f : files) {
                        String[] temp = {f.name, f.localIP};
                        this.fileTableModel.addRow(temp);
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(ShareFileInterface.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void doRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doRegisterActionPerformed
        // TODO add your handling code here:
        RegisterForm temp = new RegisterForm(this.client);
        temp.setVisible(true);
    }//GEN-LAST:event_doRegisterActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        if (this.client.serverIP != null&&this.client.port!=0) {
            JFileChooser fd = new JFileChooser();
            //fd.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);  
            fd.showOpenDialog(null);
            File f = fd.getSelectedFile();
            String filePath = f.getAbsolutePath();
            String fileName = f.getName();
            try {
                boolean flag = this.client.sendFileShareRequest(this.client.serverIP, this.client.serverPort, fileName, filePath);
                if (flag) {
                    JOptionPane.showMessageDialog(null, "You share operation is successful!");
                } else {
                    JOptionPane.showMessageDialog(null, "You share operation failed!");
                }
            } catch (IOException ex) {
                Logger.getLogger(ShareFileInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            if(this.client.serverIP == null)
            {
               JOptionPane.showMessageDialog(null, "You should register before sharing files");
            }
            else
            {
               JOptionPane.showMessageDialog(null, "You should set client port at Init_Setting before sharing files"); 
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButtonActionPerformed
        // TODO add your handling code here:
        try {
            int selectIndex = this.jTable1.getSelectedRow();
            if (selectIndex > -1) {
                FileEntry file = files.get(selectIndex);
                JFileChooser chooser = new JFileChooser();
                int returnVal =chooser.showSaveDialog(chooser);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    File dest = chooser.getSelectedFile();
                    if (dest.exists()) {
                        int copy = JOptionPane.showConfirmDialog(null, "Will you replace this file？", "Save", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                        if (copy == JOptionPane.YES_OPTION) {
                            chooser.approveSelection();
                        }
                    } else {
                        chooser.approveSelection();
                    }
//                    ProcessBar pb=new ProcessBar();
//                    pb.setVisible(true);
                    this.client.receiveFileFromSide(file, dest);
                    this.showFileDone();
                }

                
            }
        } catch (IOException ex) {
            Logger.getLogger(ShareFileInterface.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_downloadButtonActionPerformed

    private void initSettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initSettingActionPerformed
        // TODO add your handling code here:
        Init_Setting temp=new Init_Setting(this.client);
        temp.setVisible(true);
    }//GEN-LAST:event_initSettingActionPerformed

    
  
    
    public void showFileDone()
    {
        JOptionPane.showMessageDialog(null, "File Downloading Done!");
    }
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ShareFileInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ShareFileInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ShareFileInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ShareFileInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ShareFileInterface().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem doRegister;
    private javax.swing.JButton downloadButton;
    private javax.swing.JMenuItem initSetting;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchedFileName;
    private javax.swing.JMenu shareFile;
    // End of variables declaration//GEN-END:variables
}
